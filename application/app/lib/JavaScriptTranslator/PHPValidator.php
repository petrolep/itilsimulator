<?php
/**
 * PHPValidator.php
 * 2013 Petr Dvorak, petr-dvorak.cz / 1.5.13 18:02
 */

namespace ITILSimulator\Base\JavaScriptTranslator;


use Nette\Object;
use Nette\Utils\Strings;

/**
 * Simple PHP validator to check syntax of code generated by JavaScriptTranslator.
 * Note: any syntax errors will cause fatal errors which can not be handled!
 * Executing in a separate thread is a necessity. For this purpose uses remote call to call itself via HTTP GET method.
 * @package ITILSimulator\Base\JavaScriptTranslator
 */
class PHPValidator extends Object
{
	#region "Configuration"

	/**
	 * Temp path to store generated code to be validated.
	 * @var
	 */
	private $path;

	/**
	 * Website root path (e.g. "/myapp/" for "http://www.example.com/myapp/")
	 * @var
	 */
	private $baseUri;

	/**
	 * Validation via remote URL -- execution by calling remote URL with unique code identifier.
	 * @var string
	 */
	private $scriptPath = '/validate.php?code=%code%';

	#endregion

	public function __construct($baseUri)
	{
		$this->path = __DIR__ . '/../../../temp/phpvalidator';
		$this->baseUri = $baseUri;
	}

	#region "Public methods"

	/**
	 * Validate PHP code using remote service. To simulate execution in a separate thread uses HTTP call
	 * to call itself to run the code in the new thread.
	 * @param $code
	 * @return bool
	 */
	public function validate($code) {
		// Saves the code to a temp file with unique name and calls remote service to
		// check the code (the remote service is in fact the same script, so it calls itself).
		$filename = Strings::random(20);
		$path = $this->path . '/' . $filename;

		// save temp file
		file_put_contents($path, $code);

		// call remote service and check its return value
		$result = file_get_contents(str_replace('%code%', $filename, $this->baseUri . $this->scriptPath));

		// if the return value is not "ok", the code is not syntactically correct (or HTTP connection is not available)

		return $result == 'ok';
	}

	/**
	 * Validate PHP code stored in a temp local file.
	 * In case of syntax errors in the file, throws Fatal Exceptions and terminates the thread.
	 * @param $code
	 * @return string
	 */
	public function verify($code) {
		$code = $this->escapeCode($code);

		$filename = $this->path . '/' . $code;
		if (!file_exists($filename)) {
			return 'error';
		}

		$contents = file_get_contents($filename);
		if (create_function('', $contents)) {
			// if function can be created, code is ok
			// otherwise fatal exception has been thrown here
			return 'ok';
		}
	}

	/**
	 * Clears cache of temp files.
	 * @param $code
	 */
	public function clear($code) {
		$code = $this->escapeCode($code);

		$filename = $this->path . '/' . $code;
		@unlink($filename);
	}

	protected function escapeCode($code) {
		return preg_replace('/[^a-z0-9]/', '', $code);
	}

	#endregion

	#region "Get & set"

	public function setPath($path)
	{
		$this->path = $path;
	}

	public function getPath()
	{
		return $this->path;
	}

	public function setScriptPath($scriptPath)
	{
		$this->scriptPath = $scriptPath;
	}

	public function getScriptPath()
	{
		return $this->scriptPath;
	}

	#endregion
}